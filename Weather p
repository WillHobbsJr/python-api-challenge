 WeatherPy

---

## Starter Code to Generate Random Geographic Coordinates and a List of Cities
# Dependencies and Setup
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import requests
import time
from scipy.stats import linregress

# Impor the OpenWeatherMap API key
from api_keys import weather_api_key

# Import citipy to determine the cities based on latitude and longitude
from citipy import citipy
### Generate the Cities List by Using the `citipy` Library
# Empty list for holding the latitude and longitude combinations
lat_lngs = []

# Empty list for holding the cities names
cities = []

# Range of latitudes and longitudes
lat_range = (-90, 90)
lng_range = (-180, 180)

# Create a set of random lat and lng combinations
lats = np.random.uniform(lat_range[0], lat_range[1], size=1500)
lngs = np.random.uniform(lng_range[0], lng_range[1], size=1500)
lat_lngs = zip(lats, lngs)

# Identify nearest city for each lat, lng combination
for lat_lng in lat_lngs:
    city = citipy.nearest_city(lat_lng[0], lat_lng[1]).city_name
    
    # If the city is unique, then add it to a our cities list
    if city not in cities:
        cities.append(city)

# Print the city count to confirm sufficient count
print(f"Number of cities in the list: {len(cities)}")
Number of cities in the list: 598
## Requirement 1: Create Plots to Showcase the Relationship Between Weather Variables and Latitude

### Use the OpenWeatherMap API to retrieve weather data from the cities list generated in the started code
# Set the API base URL
url = f"https://api.openweathermap.org/data/2.5/weather?units=imperial&appid={weather_api_key}&q="

# Define an empty list to fetch the weather data for each city
city_data = []

# Print to logger
print("Beginning Data Retrieval     ")
print("-----------------------------")

# Create counters
record_count = 1
set_count = 1

# Loop through all the cities in our list to fetch weather data
for i, city in enumerate(cities):
        
    # Group cities in sets of 50 for logging purposes
    if (i % 50 == 0 and i >= 50):
        set_count += 1
        record_count = 0

    # Create endpoint URL with each city
    city_url = url+city 
    
    # Log the url, record, and set numbers
    print("Processing Record %s of Set %s | %s" % (record_count, set_count, city))

    # Add 1 to the record count
    record_count += 1

    # Run an API request for each of the cities
    try:
        # Parse the JSON and retrieve data
        city_weather =requests.get (city_url).json()

        # Parse out latitude, longitude, max temp, humidity, cloudiness, wind speed, country, and date
        city_lat = city_weather['coord']['lat']
        city_lng = city_weather['coord']['lon']
        city_max_temp = city_weather['main']['temp_max']
        city_humidity = city_weather['main']['humidity']
        city_clouds = city_weather['clouds']['all']
        city_wind =city_weather['wind']['speed']
        city_country = city_weather['sys']['country']
        city_date = city_weather['dt']

        # Append the City information into city_data list
        city_data.append({"City": city, 
                          "Lat": city_lat, 
                          "Lng": city_lng, 
                          "Max Temp": city_max_temp,
                          "Humidity": city_humidity,
                          "Cloudiness": city_clouds,
                          "Wind Speed": city_wind,
                          "Country": city_country,
                          "Date": city_date})

    # If an error is experienced, skip the city
    except:
        print("City not found. Skipping...")
        pass
              
# Indicate that Data Loading is complete 
print("-----------------------------")
print("Data Retrieval Complete      ")
print("-----------------------------")
Beginning Data Retrieval     
-----------------------------
Processing Record 1 of Set 1 | bethel
Processing Record 2 of Set 1 | puerto natales
Processing Record 3 of Set 1 | punta arenas
Processing Record 4 of Set 1 | wailua homesteads
Processing Record 5 of Set 1 | ust-nera
Processing Record 6 of Set 1 | creel
Processing Record 7 of Set 1 | guerrero negro
Processing Record 8 of Set 1 | palembang
Processing Record 9 of Set 1 | lebu
Processing Record 10 of Set 1 | harper
Processing Record 11 of Set 1 | aasiaat
Processing Record 12 of Set 1 | manismata
Processing Record 13 of Set 1 | aban
Processing Record 14 of Set 1 | hayrabolu
Processing Record 15 of Set 1 | freetown
Processing Record 16 of Set 1 | babu
Processing Record 17 of Set 1 | grytviken
Processing Record 18 of Set 1 | port-aux-francais
Processing Record 19 of Set 1 | mount gambier
Processing Record 20 of Set 1 | porto novo
Processing Record 21 of Set 1 | taoudenni
Processing Record 22 of Set 1 | edinburgh of the seven seas
Processing Record 23 of Set 1 | constantia
...
Processing Record 47 of Set 12 | loen
-----------------------------
Data Retrieval Complete  
# Display sample data
city_data_df.head()
	City	Lat	Lng	Max Temp	Humidity	Cloudiness	Wind Speed	Country	Date
0	bethel	41.3712	-73.4140	68.65	79	0	0.00	US	1691034720
1	puerto natales	-51.7236	-72.4875	38.97	94	100	16.55	CL	1691034721
2	punta arenas	-53.1500	-70.9167	39.40	92	100	24.94	CL	1691034444
3	wailua homesteads	22.0669	-159.3780	83.19	76	20	17.27	US	1691034721
4	ust-nera	64.5667	143.2000	67.84	35	77	4.14	RU	1691034721
# Export the City_Data into a csv
city_data_df.to_csv("output_data/cities.csv", index_label="City_ID")
# Read saved data
city_data_df = pd.read_csv("output_data/cities.csv", index_col="City_ID")

# Display sample data
city_data_df.head()
City	Lat	Lng	Max Temp	Humidity	Cloudiness	Wind Speed	Country	Date
City_ID									
0	bethel	41.3712	-73.4140	68.65	79	0	0.00	US	1691034720
1	puerto natales	-51.7236	-72.4875	38.97	94	100	16.55	CL	1691034721
2	punta arenas	-53.1500	-70.9167	39.40	92	100	24.94	CL	1691034444
3	wailua homesteads	22.0669	-159.3780	83.19	76	20	17.27	US	1691034721
4	ust-nera	64.5667	143.2000	67.84	35	77	4.14	RU	1691034721
### Create the Scatter Plots Requested

#### Latitude Vs. Temperature

